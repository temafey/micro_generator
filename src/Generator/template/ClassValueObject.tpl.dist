<?php

declare(strict_types=1);

namespace {namespace};
{useStatement}

/**
 * @class {className}
 *
 * @package {namespace}
 */
class {className}{extends}{implements}
{{useTraits}{properties}
    /**
     * Make {className} from DTO object or serialized string.
     *
     * @return {className}
     *
     * @throws Exception
     */
    public static function fromNative(): static
    {
        $data = func_get_arg(0);

        if (is_array($data)) {
            return static::fromArray($data);
        }

        if (is_string($data)) {
            $data = unserialize($data, ['allowed_classes' => false]);

            return static::fromArray($data);
        }

        throw new ValueObjectInvalidNativeValueException('Invalid native value');
    }

    /**
     * Tells whether two Collection are equal by comparing their size.
     *
     * @throws ValueObjectInvalidException
     */
    public function sameValueAs(ValueObjectInterface $valueObject): bool
    {
        if (!$valueObject instanceof static) {
            return false;
        }

        foreach (static::COMPARED_FIELDS as $field) {
            $getMethodName = 'get' . ucfirst($field);
            $field = $this->{$getMethodName}();
            $property = $valueObject->{$getMethodName}();

            if (null === $field && null === $property) {
                continue;
            }

            if (null === $field || null === $property) {
                return false;
            }

            if (
                !$field instanceof ValueObjectInterface ||
                !$property instanceof ValueObjectInterface
            ) {
                throw new ValueObjectInvalidException('Some of value not instance of \'ValueObjectInterface\'');
            }

            if (!$field->sameValueAs($property)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Return native value.
     *
     * @return mixed[]
     *
     * @throws Exception
     */
    public function toNative()
    {
        return $this->toArray();
    }

    /**
     * Returns a native string representation of the Collection object.
     *
     * @throws Exception
     */
    public function __toString(): string
    {
        return serialize($this->toArray());
    }

    /**
     * Convert array to ValueObject.
     *
     * @param mixed[] $data
     *
     * @throws Exception
     */
    public static function deserialize(array $data): self
    {
        return static::fromNative($data);
    }

    /**
     * Convert ValueObject to array.
     *
     * @return mixed[]
     *
     * @throws Exception
     */
    public function serialize(): array
    {
        return $this->toNative();
    }
{methods}
}
